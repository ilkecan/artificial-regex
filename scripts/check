#!/usr/bin/env bash

function main() {
  if [ -d "$1" ]; then
    cd "$1" || exit
  fi

  project_root="$(dirname "$(dirname "${BASH_SOURCE[0]}")")"

  readarray -d '' haskell_files < <(git ls-files -z '*.hs')
  readarray -d '' nix_files < <(git ls-files -z '*.nix')

  # license
  print_on_error reuse

  # nix
  print_on_error nix-linter
  print_on_error statix
  print_on_error deadnix

  # bash
  print_on_error shellcheck

  # haskell
  print_on_error ormolu

  cabal_file="$(find . -maxdepth 1 -name '*.cabal' -print -quit)"
  if [ -n "$cabal_file" ]; then
    print_on_error cabal-fmt
    print_on_error cabal-build

    hie_directory="./dist-newstyle"
    # stan always uses exit status of zero right now
    # see: https://github.com/kowainik/stan/issues/246
    stan
    print_on_error weeder
  fi

  print_on_error hlint
  print_on_error scan
}

function print_on_error() {
  tmp="$(mktemp)"
  if "$1" &> "$tmp"; then
    echo "$1: OK"
  else
    cat "$tmp"
  fi
  rm "$tmp"
}

function error_on_stdout() {
  if "$@" | grep .; then
    return 1
  else
    return 0
  fi
}

function reuse() {
  command reuse lint
}

function nix-linter() {
  command nix-linter "${nix_files[@]}"
}

function statix() {
  function run_statix() {
    for file in "${nix_files[@]}"; do
      command statix check "$file"
    done
  }

  error_on_stdout run_statix
}

function deadnix() {
  error_on_stdout command deadnix \
    --no-lambda-arg \
    "${nix_files[@]}"
}

function shellcheck() {
  command shellcheck "$project_root"/scripts/*
}

function ormolu() {
  command ormolu \
    --check-idempotence \
    --mode=inplace \
    "${haskell_files[@]}"
}

function cabal-fmt() {
  command cabal-fmt \
    --Werror \
    --inplace \
    "$cabal_file"
}

function cabal-build() {
  command cabal build all
}

function stan() {
  export STAN_USE_DEFAULT_CONFIG="True"
  command stan \
    remove --directory="$(realpath "$hie_directory")" \
    --cabal-file-path="$cabal_file" \
    --hiedir="$hie_directory" \
    --short
}

function weeder() {
  command weeder \
    --hie-directory="$hie_directory"
}

function hlint() {
  command hlint \
    --threads \
    --color \
    --hint="$project_root/.hlint.yaml" \
    .
}

function scan() {
  error_on_stdout command scan \
    --check-comments=False \
    --check-spacing=False \
    --join-comments=False \
    "${haskell_files[@]}"
}

# main "$@"
pre-commit run --all-files
